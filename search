public void setup() {            
  int [] theArray = {
    1, 3, 5, 7, 10
  };           
  System.out.println(binarySearch(theArray, 0));            
  System.out.println(binarySearch(theArray, 1));            
  System.out.println(binarySearch(theArray, 3));            
  System.out.println(binarySearch(theArray, 6));            
  System.out.println(binarySearch(theArray, 10));            
  System.out.println(binarySearch(theArray, 11));          
  System.out.println(binarySearch(theArray, 0, 0, 4));            
  System.out.println(binarySearch(theArray, 1, 0, 4));            
  System.out.println(binarySearch(theArray, 3, 0, 4));            
  System.out.println(binarySearch(theArray, 6, 0, 4));            
  System.out.println(binarySearch(theArray, 10, 0, 4));            
  System.out.println(binarySearch(theArray, 11, 0, 4));
}      
public static int binarySearch(int [] naNums, int nTarget) {           
  /* Your code here */
  int low=0;
  int high =naNums.length-1;
  while (low<=high)
  {
      int guess = (high+low)/2;
      if (nTarget==naNums[guess])
          return guess;
      else if (nTarget> naNums[guess])
           low=guess+1;
      else if (nTarget<naNums[guess])
            high = guess-1;
  }
  return -1;
}      
public static int binarySearch(int [] naNums, int nTarget, int low, int high) {           
  /* Your recursive code here */
  if (low>high) 
  return -1; 
 int guess= (low+high)/2;
 if (naNums[guess]>nTarget)
    return binarySearch(naNums, nTarget, low, guess-1);
 else if (naNums[guess]<nTarget)
    return binarySearch(naNums, nTarget, guess+1, high);
 else 
     return guess;
}  
